!function(e){var t={};function n(r){if(t[r])return t[r].exports;var u=t[r]={i:r,l:!1,exports:{}};return e[r].call(u.exports,u,u.exports,n),u.l=!0,u.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var u in e)n.d(r,u,function(t){return e[t]}.bind(null,u));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=6)}([function(e,t){e.exports=require("react")},function(e,t){e.exports=require("apollo-server")},function(e,t){e.exports=require("@apollo/client")},function(e,t){e.exports=require("dotenv")},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const u=n(1),o=r(n(10)),i=process.env.SECRET,a={generateToken:({id:e,role:t})=>o.default.sign({id:e,role:t},i),getUserIdFromToken(e){try{const t=o.default.verify(e,i),{id:n}=t;return n}catch(e){return""}},verifyLogin(e,t){const n=e.username===t.username,r=e.password===t.password;return n&&r},authenticated:e=>(t,n,r,o)=>{const{authedUser:i}=r;if(!i)throw new u.AuthenticationError("User is not authenticated.");return e(t,n,r,o)},authorized:(e,t)=>(n,r,o,i)=>{const{authedUser:a}=o;if(a&&a.role!==t)throw new u.AuthenticationError("User is not authenticated.");return e(n,r,o,i)}};t.default=a},function(e,t){e.exports=require("react-router-dom")},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(u,o){function i(e){try{l(r.next(e))}catch(e){o(e)}}function a(e){try{l(r.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?u(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,a)}l((r=r.apply(e,t||[])).next())}))},u=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});u(n(3)).default.config();const o=n(1),i=u(n(7)),a=u(n(12));n(16);!function(e,{typeDefs:t,resolvers:n,auth:u,utils:{computeContext:i}}){r(this,void 0,void 0,(function*(){yield e.connect();new o.ApolloServer({typeDefs:t,resolvers:n,context({req:t}){return r(this,void 0,void 0,(function*(){return yield i(t,e,u)}))}}).listen({port:9991}).then((()=>{console.log("üöÄ Apollo Server launched @ https://sidiousvic.dev/spiders/graphql")}))}))}(new a.default,i.default)},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const u=r(n(8)),o=r(n(9)),i=r(n(4)),a=r(n(11)),l={typeDefs:u.default,resolvers:o.default,auth:i.default,utils:a.default};t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(1).gql`
  enum Role {
    DARKLORD
    GUEST
  }

  type User {
    id: ID!
    username: String!
    password: String!
    role: Role!
  }

  type AuthUser {
    token: String!
    user: User!
  }

  input UserLogin {
    username: String!
    password: String!
  }

  input Post {
    title: String!
    author: String!
    tags: String!
    body: String!
    updatedAt: String!
    userId: Int
    published: Boolean
    publishedAt: String
  }

  type Query {
    me: User!
  }

  type Mutation {
    signin(input: UserLogin!): AuthUser!
    addPost(input: Post): String
  }
`;t.default=r},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(u,o){function i(e){try{l(r.next(e))}catch(e){o(e)}}function a(e){try{l(r.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?u(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,a)}l((r=r.apply(e,t||[])).next())}))},u=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=n(1),i=u(n(4)),{authenticated:a}=i.default,l={Query:{me:a(((e,t,{authedUser:n})=>n))},Mutation:{signin(e,{input:t},{auth:n,database:u}){return r(this,void 0,void 0,(function*(){const e=yield u.findUser(t);if(!e)throw new o.AuthenticationError("User not found.");if(!n.verifyLogin(t,e))throw new o.AuthenticationError("Wrong login.");return{token:n.generateToken(e),user:e}}))},addPost(e,{input:t},{database:n}){return r(this,void 0,void 0,(function*(){return yield n.addPost(t),"Web successfully woven!"}))}}};t.default=l},function(e,t){e.exports=require("jsonwebtoken")},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(u,o){function i(e){try{l(r.next(e))}catch(e){o(e)}}function a(e){try{l(r.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?u(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,a)}l((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const u={computeContext(e,t,n){return r(this,void 0,void 0,(function*(){const r=e.headers.authorization,{getUserIdFromToken:u}=n;let o={};if(r){const e=u(r);o=yield t.findUser({id:e}),console.log(o)}return{database:t,auth:n,authedUser:o}}))}};t.default=u},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(u,o){function i(e){try{l(r.next(e))}catch(e){o(e)}}function a(e){try{l(r.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?u(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,a)}l((r=r.apply(e,t||[])).next())}))},u=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=n(13),i=u(n(3)),a=u(n(14));i.default.config();const l=u(n(15)),s=a.default.resolve("server","db","migrations");console.log(s);const c=process.env.PG_USER,d=process.env.PG_DATABASE,f=process.env.PG_HOST,p=Number(process.env.PG_PORT);t.default=class{findUser(e){return r(this,void 0,void 0,(function*(){const{rows:[t]}=yield this.pool.query(`SELECT * FROM users WHERE username = '${e.username}'`);if(t)return t}))}addPost(e){return r(this,void 0,void 0,(function*(){yield this.pool.query(`INSERT INTO posts (title, author, tags, body, updated_at, user_id, published, published_at) \n      VALUES (\n          '${e.title}',\n          '${e.author}',\n          '${e.tags}',\n          '${e.body}',\n          to_timestamp(${Number(e.updatedAt)/1e3}),\n          '${e.userId}',\n          '${e.published}',\n          to_timestamp(${Number(e.publishedAt)/1e3})\n        )`)}))}migrate(){return r(this,void 0,void 0,(function*(){console.log("üê™ Running migrations..."),yield l.default({databaseUrl:`postgres://${c}@${f}:${p}/${d}`,migrationsTable:"spiders_migrations",dir:s,direction:"up",count:9999})}))}connect(){return r(this,void 0,void 0,(function*(){console.log("üîã Connecting to database..."),yield this.migrate(),this.pool=new o.Pool({user:c,host:f,database:d,port:Number(p)})}))}}},function(e,t){e.exports=require("pg")},function(e,t){e.exports=require("path")},function(e,t){e.exports=require("node-pg-migrate")},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const u=n(2),o=r(n(0)),i=r(n(17)),a=r(n(18)),l=n(19),s=r(n(20)),c=r(n(21)),d=n(27),f="https://sidiousvic.dev/spiders/graphql",p=s.default();function h({content:e,state:t}){return o.default.createElement("html",null,o.default.createElement("head",null,o.default.createElement("link",{rel:"icon",href:"/favicon.ico"})),o.default.createElement("body",null,o.default.createElement("div",{id:"spiders",dangerouslySetInnerHTML:{__html:e}}),o.default.createElement("script",{dangerouslySetInnerHTML:{__html:`window.__APOLLO_STATE__=${JSON.stringify(t).replace(/</g,"\\u003c")};`}})))}p.use("/",((e,t)=>{const n=new u.ApolloClient({ssrMode:!0,link:u.createHttpLink({fetch:i.default,uri:f,credentials:"same-origin",headers:{cookie:e.header("Cookie")}}),cache:new u.InMemoryCache}),r=o.default.createElement(u.ApolloProvider,{client:n},o.default.createElement(l.StaticRouter,{location:e.url,context:{}},o.default.createElement(c.default,null)));d.getDataFromTree(r).then((()=>{const e=a.default.renderToString(r),u=n.extract(),i=a.default.renderToStaticMarkup(o.default.createElement(h,{content:e,state:u}));t.status(200),t.send("<!DOCTYPE html>\n"+i),t.end()}))})),p.listen(9992,(()=>console.log("üß™ SSR React is now running @ "+f)))},function(e,t){e.exports=require("cross-fetch")},function(e,t){e.exports=require("react-dom/server")},function(e,t){e.exports=require("react-router")},function(e,t){e.exports=require("express")},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const u=r(n(0)),o=n(5),i=r(n(22)),a=r(n(23));t.default=function(){return u.default.createElement(u.default.Fragment,null,u.default.createElement(i.default,null),u.default.createElement(o.Switch,null,a.default.map((e=>u.default.createElement(o.Route,Object.assign({key:e.name},e))))))}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const u=r(n(0)),o=n(5);t.default=function(){return u.default.createElement("div",{id:"navbar"},u.default.createElement("div",{id:"spiders"},u.default.createElement("h1",null,"Spiders üï∏"),u.default.createElement("h2",null,"A web engineering log."),u.default.createElement("li",null,u.default.createElement(o.Link,{to:"/spiders"},"home")),u.default.createElement("li",null,u.default.createElement(o.Link,{to:"/spiders/weave"},"weave"))))}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const u=r(n(24)),o=[{path:"/spiders",name:"home",exact:!0,component:r(n(26)).default},{path:"/spiders/weave",name:"weave",exact:!1,component:u.default}];t.default=o},function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),u=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return u(t,e),t},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=o(n(0)),l=i(n(25));t.default=function(){const[e,t]=a.useState("");return a.default.createElement("div",{id:"weave"},!e&&a.default.createElement(l.default,{setToken:t}),e&&"Signed in")}},function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),u=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return u(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.signinMutation=void 0;const i=o(n(0)),a=n(2),l=n(2);t.signinMutation=({username:e,password:t})=>l.gql`
mutation {
  signin(input: {username: "${e}", password: "${t}"}) {
    token
  }
}
`,t.default=function({setToken:e}){const[n,r]=i.useState({username:"",password:""}),[u,{data:o}]=a.useMutation(t.signinMutation(n));i.useEffect((()=>{o&&e(o.signin.token)}),[o]);const l=i.useRef(null),s=i.useRef(null);function c(){const e=l.current,t=s.current;e&&t&&r({username:e.value,password:t.value})}return i.default.createElement(i.default.Fragment,null,i.default.createElement("div",{id:"login-form"},i.default.createElement("ul",null,i.default.createElement("label",{htmlFor:"username"},"username"),i.default.createElement("br",null),i.default.createElement("input",{ref:l,onChange:c,type:"text",placeholder:"user",name:"username",required:!0}),i.default.createElement("br",null),i.default.createElement("label",{htmlFor:"uname"},"Password"),i.default.createElement("br",null),i.default.createElement("input",{ref:s,onChange:c,type:"password",placeholder:"password",name:"password",required:!0}),i.default.createElement("br",null),i.default.createElement("button",{onClick:()=>u(),type:"submit"},"Login"))))}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const u=r(n(0));t.default=function(){return u.default.createElement("div",{id:"log"},"Log")}},function(e,t){e.exports=require("@apollo/client/react/ssr")}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,